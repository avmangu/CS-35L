NAME: Animesh Mangu
UID: 804-771-005
TA: Guangyu Zhou

Laboratory 6 Log: Multithreaded Performance

The purpose of this lab is to see how running multiple threads at once can alter
the performance of a program. In this case, we will be testing the sort command
with a various amount of threads, as well as the time command to test its
performance on a generated file.

First, I ran the command sort --version to make sure that I had the correct
version of the sort command with the improvement that was contributed by UCLA
students as part of Computer Science 130. Once the proper version was confirmed,
I proceeded to generate a file containing 10,000,000 random single-precision
floating point numbers, in textual form, one per line with no white space. After
checking online, I found that the IEEE single-precision floating point number
occupies 4 bytes (32 bits) in computer memory. Thereforce, to generate a file
containing 10M random single-precision floating point numbers, I used the command:

od -An -t f4 -N 40000000 < /dev/urandom |
tr ' ' '\n' |
sed '/^$/d' > test.txt

where -An is used to remove the addresses, -f4 is used to generate 4 bytes at a
time, tr is used to replace blank lines with new lines, and sed is used to
remove any empty lines. To make sure that 10,000,000 lines were created, we can
run the command:

wc -l test.txt

Since this command outputted 10,000,000 as the line number, the correct file was
created. Now, we can finally test our multithread performance with the sort
command on the generated test.txt file. To do this, we can use the command:

time -p sort -g test.txt > /dev/null

when checking the performance without multithreading. To introduce multithreads,
the following commands are used:

time -p sort -g --parallel=1 test.txt > /dev/null
time -p sort -g --parallel=2 test.txt > /dev/null
time -p sort -g --parallel=4 test.txt > /dev/null
time -p sort -g --parallel=8 test.txt > /dev/null

As shown above, the commands were tested with 1, 2, 4, and 8 threads. Here are
the results of all 5 performance tests:

+---------+--------+--------+--------+--------+--------+
| Threads |   0    |   1    |   2    |   4    |   8    |
+---------+--------+--------+--------+--------+--------+
| real    | 22.70  | 106.25 | 58.76  | 34.71  | 22.33  |
+---------+--------+--------+--------+--------+--------+
| user    | 118.70 | 106.02 | 111.61 | 116.82 | 118.44 |
+---------+--------+--------+--------+--------+--------+
| sys     | 0.45   | 0.21   | 0.29   | 0.35   | 0.43   |
+---------+--------+--------+--------+--------+--------+

By a small margin, the 8 threads is slightly faster than the command run without
specifying multithreading. However, due to its speed, the command likely uses
multithreading by default in its C code. The plain text table was generated by
https://www.tablesgenerator.com/text_tables# for viewing convenience and
organization. 

The END!
